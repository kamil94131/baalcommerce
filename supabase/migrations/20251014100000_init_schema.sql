-- migration: 20251014100000_init_schema.sql
-- description: Initial database schema setup for BaalCommerce.
-- tables:
--   - Couriers
--   - Profiles
--   - Offers
--   - Orders
--   - Roles
--   - UserRoles
-- functions:
--   - has_role

--
-- create camp type
--
create type camp as enum ('OLD_CAMP', 'NEW_CAMP', 'SWAMP_CAMP');

--
-- create couriers table
--
create table "Couriers" (
    "id" bigint generated by default as identity primary key,
    "name" varchar(20) not null unique check (length(name) >= 5),
    "camp" camp not null
);

-- enable row level security for "Couriers"
alter table "Couriers" enable row level security;


--
-- create roles table
--
create table "Roles" (
    "id" integer generated by default as identity primary key,
    "name" varchar(10) not null unique check (length(name) >= 5)
);

-- enable row level security for "Roles"
alter table "Roles" enable row level security;


--
-- create profiles table
--
create table "Profiles" (
    "id" bigint generated by default as identity primary key,
    "userId" uuid not null unique references auth.users(id) on delete cascade,
    "name" varchar(50) not null unique check (length(name) >= 5),
    "camp" camp not null default 'SWAMP_CAMP',
    "defaultCourierId" bigint references "Couriers"(id) on delete set null
);

-- enable row level security for "Profiles"
alter table "Profiles" enable row level security;


--
-- create userroles table
--
create table "UserRoles" (
    "userId" uuid not null references auth.users(id) on delete cascade,
    "roleId" integer not null references "Roles"(id) on delete cascade,
    primary key ("userId", "roleId")
);

-- enable row level security for "UserRoles"
alter table "UserRoles" enable row level security;


--
-- create offers table
--
create table "Offers" (
    "id" bigint generated by default as identity primary key,
    "title" varchar(20) not null check (length(title) >= 5),
    "description" varchar(200) check (length(description) >= 5),
    "price" integer not null check (price between 0 and 999),
    "quantity" integer not null check (quantity between 1 and 99),
    "createdAt" timestamp with time zone not null default now(),
    "sellerId" uuid not null references auth.users(id) on delete cascade,
    "sellerName" varchar(50) not null,
    "sellerCamp" camp not null,
    "status" varchar(10) not null default 'CREATED' check (status in ('CREATED', 'DONE'))
);

-- enable row level security for "Offers"
alter table "Offers" enable row level security;

-- add indexes for "Offers"
create index on "Offers" ("sellerId");
create index on "Offers" ("status");


--
-- create orders table
--
create table "Orders" (
    "id" bigint generated by default as identity primary key,
    "offerId" bigint not null references "Offers"(id) on delete restrict,
    "title" varchar(20) not null,
    "quantity" integer not null,
    "price" integer not null,
    "sellerName" varchar(50) not null,
    "sellerCamp" camp not null,
    "sellerId" uuid not null references auth.users(id) on delete set null,
    "buyerId" uuid not null references auth.users(id) on delete set null,
    "buyerName" varchar(50) not null,
    "buyerCamp" camp not null,
    "courierId" bigint not null references "Couriers"(id) on delete restrict,
    "deliveredAt" timestamp with time zone not null default now()
);

-- enable row level security for "Orders"
alter table "Orders" enable row level security;

-- add indexes for "Orders"
create index on "Orders" ("offerId");
create index on "Orders" ("sellerId");
create index on "Orders" ("buyerId");
create index on "Orders" ("courierId");


--
-- helper function to check user roles
--
create or replace function has_role(role_name text)
returns boolean as $$
begin
  return exists (
    select 1
    from "UserRoles" ur
    join "Roles" r on ur."roleId" = r.id
    where ur."userId" = auth.uid() and r.name = role_name
  );
end;
$$ language plpgsql security definer;


--
-- rls policies for "Profiles"
--
-- allow public read access
create policy "Allow public read access" on "Profiles" for select using (true);
-- allow users to update their own profile
create policy "Allow individual update access" on "Profiles" for update using (auth.uid() = "userId");


--
-- rls policies for "Offers"
--
-- allow public read access for active offers
create policy "Allow public read access for active offers" on "Offers" for select using (status = 'CREATED');
-- allow authenticated users to create offers
create policy "Allow insert for authenticated users" on "Offers" for insert with check (auth.role() = 'authenticated');
-- allow offer author to update/delete their own offers
create policy "Allow individual update/delete access" on "Offers" for update using (auth.uid() = "sellerId");
create policy "Allow individual delete access" on "Offers" for delete using (auth.uid() = "sellerId");


--
-- rls policies for "Orders"
--
-- allow users to see their own orders (as buyer or seller)
create policy "Allow individual read access" on "Orders" for select using (auth.uid() = "buyerId" or auth.uid() = "sellerId");
-- allow authenticated users to create orders
create policy "Allow insert for authenticated users" on "Orders" for insert with check (auth.role() = 'authenticated');


--
-- rls policies for "Couriers"
--
-- allow authenticated users to read/insert couriers
create policy "Allow read for authenticated users" on "Couriers" for select using (auth.role() = 'authenticated');
create policy "Allow insert for authenticated users" on "Couriers" for insert with check (auth.role() = 'authenticated');
-- allow users with 'gomez' role to delete couriers
create policy "Allow delete for gomez role" on "Couriers" for delete using (has_role('gomez'));


--
-- rls policies for "Roles"
--
-- allow authenticated users to read roles
create policy "Allow read for authenticated users" on "Roles" for select using (auth.role() = 'authenticated');
-- note: insert/update/delete on "Roles" should be handled by super-admin or migrations.


--
-- rls policies for "UserRoles"
--
-- allow users to see their own roles
create policy "Allow individual read access" on "UserRoles" for select using (auth.uid() = "userId");
-- note: insert/update/delete on "UserRoles" should be handled by super-admin or specific application logic.
